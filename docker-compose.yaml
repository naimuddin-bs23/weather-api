version: '3.8'

services:
  # Main API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - HOSTNAME=${HOSTNAME:-server1}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: ${REPLICAS:-1}
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Load balancer for production deployments
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
    restart: unless-stopped
    profiles:
      - production
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Development service with hot reload
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "${DEV_PORT:-3001}:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOSTNAME=${HOSTNAME:-server1}-dev
      - WEATHER_API_KEY=${WEATHER_API_KEY}
    volumes:
      - .:/app
      - /app/node_modules
    restart: unless-stopped
    profiles:
      - dev